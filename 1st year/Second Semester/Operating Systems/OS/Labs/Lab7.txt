fork() returneaza	-> PID copil in parinte
			-> 0 in copil

wait(0); parametrul este codul de return al copilului
daca codul de return al fiului nu este primit cu wait de parinte, intra in starea de zombie

un program apelat: $?	-> afiseaza valoarea de return

• wait() asteapta dupa codul de return al oricarui fiu
• waitpid(pid, int* &x, int (putem pune 0)) asteapta codul de return al unui fiu anume
• getpid()
• getppid() -> aflu pidul parintelui din codul copilului, 1 daca parintele moare inaintea copilului
• daca parintele moare inainte, copilul ramane mostenire si ia codul de return al mainului (?)

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main() {

	int p2c[2], c2p[2];
	pipe(p2c); pipe(c2p);
	int n=fork();

	if(n==0) {
		//child
		close(p2c[1]); close(c2p[0]);
		int x[2], suma;
		read(p2c[0], &x[0], 2*sizeof(int));
		s = x[0] + x[1];
		write(c2p[1], &s, sizeof(int));
		close(p2c[0]); close(c2p[1]);
		exit(0);
	}

	//parent
	close(p2c[0]); close(c2p[1]); //inchidem ce nu avem voie sa folosim
	int a=7, b=3, sum;
	write(p2c[1], &a, sizeof(int));
	write(p2c[1], &b, sizeof(int));
	read(c2p[0], &sum, sizof(int));
	wait(0);
	close(p2c[1]); close(c2p[0]); //inchidem ce am folosit
	return 0;
}

======================
vrem sa citim intr-un buffer de 1000 de octeti, read ne returneaza 200
int n=0;
while(n<size)
{
	//indiferent cat avem de citit, citim tot, chiar daca read nu reuseste din prima sa citeasca
	n+=read(p[0], (char*) ((zise_t)buffer+n), size-n);
}
======================
prob1. Parintele primeste ca si parametru numele unui fisier si trimite catre copil continutul lui pentru a fi criptat. copilul intoarce textul criptat folosind operatiia buf[i]^=0xBC, iar parintele il salveaza inapoi in fisier.

./prog file.txt -> cripteaza textul
./prog file.txt -> decripteaza textul

• pentru a gasi size:
#include <sys/stat.h>
struct stat st;
stat(char* filename, &st);
size=st.st_size;
	SAU
functia lsic