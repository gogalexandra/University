1 2 3 4 || 5 6 7 8 9 \10 11 12 13 14 \15 16 17 18 19 \20 21 22 23 24 25
    lista	1		2		3		4
sqrt = 5
max 25

max  - sqrt + 1  / nr de procese * idProcess = start
max  - sqrt +1  / nr de procese * (idProcess +1) = end


2 3 5 7  || 8


100 - 10 90 /4 = 22.5
1-10
11-33: sqrt + 22* (id - 1) + 1  
33-55
55-77
77-100


void mergeSort int•v , int dataSize1   int myid , int nrProc) {
2	if(nrProc = 1 II dataSize <= 1){
3	mergeSortLocal(v, dataSize);
}else {
5	in.t balfLen = dataSize I 2;
6	int balf Proc = nrProc I 2;
7	int child = myld+balfProc ;	.
MPI Ssen.d(&ha:J,fLen, 1, MPI_INT , child, i, MPI _C0Ml1_ \IORLD) ;
8	MPI-Ssend &halfProc, 1, MPI_INT, child , 2, MPI_COMM_WORLD);
MP -Ssend v	balfSize , MPI_INT, child , 3, HPI_COMM_WORLD) ;
0	-	.	'	f S ·	dataSize-balfSiz-e , myId , nrProc);
mergeSort(v+bal	ize, MPI INT child, 4, MPI_COMM_WORLD, MPI_STATUS_IGNORE); MPI_Recv(v, balfSize,	-	'.	.
2	mergeParts v • dataSize, balfS1ze) ,
}
6	}	(' t myid) {
cl	vod vorker in	.
MPI Status  status •
 
7	int-dataSize •
 
nrProc;
 
HPI INT , MP ANY_ SOURCE , 1, MPLGOMH_w
 
RLD . .. •atus) ;
 
8	(&dataSize • 1
 
-	·  -
 
o	..
 
9
;()

:1
:?.
·3







































9
 
MPI_R.ecv nt a status.MPI_SOURGE;
auto pare	P	c	MPI INT parent 2  MPI_COMM _WORLD, MPI_STATUS_ IGNORE) ;
iteCV (fror rO I	I	-	' .	'	'
MP:.vector v·dataS3'ze);
:;. · cv(v.data(), dataSize, MPI_INT,  puent, 3, MPI_C0Hl1_WORLD ,  KPI_STATUS_IGNORE);
mergeSort (v .data() , dataSize, myld , nrProc);
MPI_Ssend (v.d.ata (), dataS.iZe, MPI_INT,  parent, 3,  MPl_COMM_WORLO) ;





void mergeSort (int* v, int dataSize, int myld, int mrProc) {
	if (nrProc == 1 | | dataSize <= 1) {
		mergeSortLocal (v, dataSize);
	} else {
		int halfLen = dataSize / 2;
		int halfProc = nrProc / 2;
		int child = myld+halfProc;
		MPI_Ssend (&halfLen, 1, MPI_INT, child, 1, MPI_COMM_WORLD) ;
		MPI_Ssend (&halfProc, 1, MPI_INT, child, 2, MPI_COMM_WORLD) ;
		MPI_Ssend (v, halfSize, MPI_INT, child, 3, MPI_COMM_WORLD); mergeSort (v+halfSize, dataSize-halfSize, myld, nrProc);
		MPI_Recv(v, halfSize, MPI_INT, child, 4, MPI_COMM_WORLD, MPI_STATUS_IGNORE) ; mergeParts (v, dataSize, halfSize);
	}
}
void worker (int myld) {
	MPI_Status status; 
	int dataSize, nrProc;
	MPI_Recv (&dataSize, 1, MPI_INT, MPI_ANY_SOURCE, 1, MPI_COMM_WORLD, &status);
	auto parent = status.MPI_SOURCE;
	MPI_Recv (EnrProc, 1, MPI_INT, parent, 2, MPI_COMM_WORLD, MPI-STATUS_IGNORE) ; 
	std: :vector v (dataSize) ;
	MPI_Recv (v. data(), dataSize, MPI_INT, parent, 3, MPI_COMM_WORLD, MPI_STATUS_IGNORE) ; 
	mergeSort (v. data () , dataSize, myld, nrProc);
	MPI_Ssend (v. data (), dataSize, MPI_INT, parent, 3, MPI_COMM_WORLD);
}
 