;a
(defun insertN (l e n)
    (cond
        ((null l) (cons e l))
        ((equal n 1) (cons e l))
        (T (cons (car l) (insertN (cdr l) e (- n 1))))
    )
) 

;b 
(defun suma(l)
  (cond
         ((null l) 0)
         ((numberp (car l)) (+ (car l) (suma(cdr l))))
         ((listp (car l)) (+ (suma(car l)) (suma(cdr l))))
         (T (suma(cdr l)))
   )
)

;c
(defun setOfSub(l)
  (cond
      ((null l) nil)
      ((listp (car l)) (append (list(car l)) (setOfSub(car l)) (setOfSub(cdr l))))
      (T (setOfSub(cdr l)))
   )
)

;d
(defun rm (l e)
    (cond
        ((null l) nil)
        ((equal (car l) e) (rm (cdr l) e))
        (T (cons (car l) (rm (cdr l) e)))
    )
)

(defun eqq(l1 l2)
  (cond
       ((and (null l1) (null l2)) T )
       ((or (null l1) (null l2)) nil)
       (T  (eqq (cdr l1) (cdr l2)) (rm l2 (car l1)))
  )
)


