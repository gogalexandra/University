PrgState{
ExeStack: Ref(int) v
newAlloc{varName='v , exp=20}
Ref(Ref(int)) a
newAlloc{varName='a , exp=v}
print(v)
print(a)





SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState{
ExeStack: newAlloc{varName='v , exp=20}
Ref(Ref(int)) a
newAlloc{varName='a , exp=v}
print(v)
print(a)



Ref(int) v
SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState{
ExeStack: newAlloc{varName='v , exp=20}
Ref(Ref(int)) a
newAlloc{varName='a , exp=v}
print(v)
print(a)



Ref(int) v
SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState{
ExeStack: newAlloc{varName='v , exp=20}
Ref(Ref(int)) a
newAlloc{varName='a , exp=v}
print(v)
print(a)




SymTable: v -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState{
ExeStack: newAlloc{varName='v , exp=20}
Ref(Ref(int)) a
newAlloc{varName='a , exp=v}
print(v)
print(a)




SymTable: v -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState{
ExeStack: Ref(Ref(int)) a
newAlloc{varName='a , exp=v}
print(v)
print(a)


newAlloc{varName='v , exp=20}
SymTable: v -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState{
ExeStack: Ref(Ref(int)) a
newAlloc{varName='a , exp=v}
print(v)
print(a)


newAlloc{varName='v , exp=20}
SymTable: v -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState{
ExeStack: Ref(Ref(int)) a
newAlloc{varName='a , exp=v}
print(v)
print(a)



SymTable: v -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState{
ExeStack: Ref(Ref(int)) a
newAlloc{varName='a , exp=v}
print(v)
print(a)



SymTable: v -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState{
ExeStack: newAlloc{varName='a , exp=v}
print(v)
print(a)

Ref(Ref(int)) a
SymTable: v -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState{
ExeStack: newAlloc{varName='a , exp=v}
print(v)
print(a)

Ref(Ref(int)) a
SymTable: v -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState{
ExeStack: newAlloc{varName='a , exp=v}
print(v)
print(a)


SymTable: a -> (0, Ref(int)); v -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState{
ExeStack: newAlloc{varName='a , exp=v}
print(v)
print(a)


SymTable: a -> (0, Ref(int)); v -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState{
ExeStack: print(v)
print(a)
newAlloc{varName='a , exp=v}
SymTable: a -> (0, Ref(int)); v -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState{
ExeStack: print(v)
print(a)
newAlloc{varName='a , exp=v}
SymTable: a -> (0, Ref(int)); v -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState{
ExeStack: print(v)
print(a)

SymTable: a -> (2, Ref(int)); v -> (1, int); 
FileTable: 
Heap: 1 -> 20
2 -> (1, int)
Output: 
--------------------------------
PrgState{
ExeStack: print(v)
print(a)

SymTable: a -> (2, Ref(int)); v -> (1, int); 
FileTable: 
Heap: 1 -> 20
2 -> (1, int)
Output: 
--------------------------------
PrgState{
ExeStack: print(a)print(v)
SymTable: a -> (2, Ref(int)); v -> (1, int); 
FileTable: 
Heap: 1 -> 20
2 -> (1, int)
Output: 
--------------------------------
PrgState{
ExeStack: print(a)print(v)
SymTable: a -> (2, Ref(int)); v -> (1, int); 
FileTable: 
Heap: 1 -> 20
2 -> (1, int)
Output: 
--------------------------------
PrgState{
ExeStack: print(a)
SymTable: a -> (2, Ref(int)); v -> (1, int); 
FileTable: 
Heap: 1 -> 20
2 -> (1, int)
Output: (1, int) 
--------------------------------
PrgState{
ExeStack: print(a)
SymTable: a -> (2, Ref(int)); v -> (1, int); 
FileTable: 
Heap: 1 -> 20
2 -> (1, int)
Output: (1, int) 
--------------------------------
PrgState{
ExeStack: 
SymTable: a -> (2, Ref(int)); v -> (1, int); 
FileTable: 
Heap: 1 -> 20
2 -> (1, int)
Output: (1, int) (2, Ref(int)) 
--------------------------------
PrgState{
ExeStack: 
SymTable: a -> (2, Ref(int)); v -> (1, int); 
FileTable: 
Heap: 1 -> 20
2 -> (1, int)
Output: (1, int) (2, Ref(int)) 
--------------------------------
