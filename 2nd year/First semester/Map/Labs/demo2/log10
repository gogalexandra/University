PrgState 1 {
ExeStack: Ref(int) a
v=10
newAlloc(a , 22)
fork((wH(a, 30);(v=32;(print(v);print(rH(a))))))
print(v)
print(rH(a))

int v

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Ref(int) a
v=10
newAlloc(a , 22)
fork((wH(a, 30);(v=32;(print(v);print(rH(a))))))
print(v)
print(rH(a))

SymTable: v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: v=10
newAlloc(a , 22)
fork((wH(a, 30);(v=32;(print(v);print(rH(a))))))
print(v)
print(rH(a))

Ref(int) a

SymTable: v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: v=10
newAlloc(a , 22)
fork((wH(a, 30);(v=32;(print(v);print(rH(a))))))
print(v)
print(rH(a))

SymTable: a -> (0, int); v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(a , 22)
fork((wH(a, 30);(v=32;(print(v);print(rH(a))))))
print(v)
print(rH(a))

v=10

SymTable: a -> (0, int); v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(a , 22)
fork((wH(a, 30);(v=32;(print(v);print(rH(a))))))
print(v)
print(rH(a))

SymTable: a -> (0, int); v -> 10; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: fork((wH(a, 30);(v=32;(print(v);print(rH(a))))))
print(v)
print(rH(a))

newAlloc(a , 22)

SymTable: a -> (0, int); v -> 10; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: fork((wH(a, 30);(v=32;(print(v);print(rH(a))))))
print(v)
print(rH(a))

SymTable: a -> (1, int); v -> 10; 
FileTable: 
Heap: 1 -> 22
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(v)
print(rH(a))

fork((wH(a, 30);(v=32;(print(v);print(rH(a))))))

SymTable: a -> (1, int); v -> 10; 
FileTable: 
Heap: 1 -> 22
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(v)
print(rH(a))

SymTable: a -> (1, int); v -> 10; 
FileTable: 
Heap: 1 -> 22
Output: 
--------------------------------
PrgState 10 {
ExeStack: wH(a, 30)
v=32
print(v)
print(rH(a))

SymTable: a -> (1, int); v -> 10; 
FileTable: 
Heap: 1 -> 22
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

print(v)

SymTable: a -> (1, int); v -> 10; 
FileTable: 
Heap: 1 -> 22
Output: 
--------------------------------
PrgState 10 {
ExeStack: v=32
print(v)
print(rH(a))

wH(a, 30)

SymTable: a -> (1, int); v -> 10; 
FileTable: 
Heap: 1 -> 22
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

SymTable: a -> (1, int); v -> 10; 
FileTable: 
Heap: 1 -> 30
Output: 10 
--------------------------------
PrgState 10 {
ExeStack: v=32
print(v)
print(rH(a))

SymTable: a -> (1, int); v -> 10; 
FileTable: 
Heap: 1 -> 30
Output: 10 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: a -> (1, int); v -> 10; 
FileTable: 
Heap: 1 -> 30
Output: 10 30 
--------------------------------
PrgState 10 {
ExeStack: print(v)
print(rH(a))

v=32

SymTable: a -> (1, int); v -> 10; 
FileTable: 
Heap: 1 -> 30
Output: 10 30 
--------------------------------
PrgState 10 {
ExeStack: print(v)
print(rH(a))

SymTable: a -> (1, int); v -> 32; 
FileTable: 
Heap: 1 -> 30
Output: 10 30 
--------------------------------
PrgState 10 {
ExeStack: 
print(rH(a))

print(v)

SymTable: a -> (1, int); v -> 32; 
FileTable: 
Heap: 1 -> 30
Output: 10 30 
--------------------------------
PrgState 10 {
ExeStack: 
print(rH(a))

SymTable: a -> (1, int); v -> 32; 
FileTable: 
Heap: 1 -> 30
Output: 10 30 32 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 32; 
FileTable: 
Heap: 1 -> 30
Output: 10 30 32 30 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

bool b

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

bool b

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

int c

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

int c

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

b=true

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

b=true

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(a) then(c=100)else(c=200))
print(c)

(if(a) then(c=100)else(c=200))

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(a) then(c=100)else(c=200))
print(c)

(if(a) then(c=100)else(c=200))

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(a) then(c=100)else(c=200))
print(c)

print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(a) then(c=100)else(c=200))
print(c)

print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: (if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(c)

(if(a) then(c=100)else(c=200))

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(c)

(if(a) then(c=100)else(c=200))

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 0 0 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 0 0 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

bool b

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

bool b

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

int c

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

int c

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

b=true

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

b=true

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(a) then(c=100)else(c=200))
print(c)

(if(a) then(c=100)else(c=200))

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(a) then(c=100)else(c=200))
print(c)

(if(a) then(c=100)else(c=200))

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(a) then(c=100)else(c=200))
print(c)

print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(a) then(c=100)else(c=200))
print(c)

print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: (if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

bool b

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

bool b

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

int c

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

int c

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

b=true

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

b=true

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(a) then(c=100)else(c=200))
print(c)

(if(a) then(c=100)else(c=200))

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(a) then(c=100)else(c=200))
print(c)

(if(a) then(c=100)else(c=200))

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

bool b

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

bool b

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

int c

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

int c

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

b=true

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

b=true

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(a) then(c=100)else(c=200))
print(c)
(if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(a) then(c=100)else(c=200))
print(c)

(if(a) then(c=100)else(c=200))

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(a) then(c=100)else(c=200))
print(c)

(if(a) then(c=100)else(c=200))

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(a) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

bool b

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

bool b

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

int c

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

int c

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

b=true

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

b=true

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(false) then(c=100)else(c=200))
print(c)

(if(b) then(c=100)else(c=200))

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(false) then(c=100)else(c=200))
print(c)

(if(b) then(c=100)else(c=200))

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(false) then(c=100)else(c=200))
print(c)

c=100

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(false) then(c=100)else(c=200))
print(c)

c=100

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(false) then(c=100)else(c=200))
print(c)

print(c)

SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(false) then(c=100)else(c=200))
print(c)

print(c)

SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 100 
--------------------------------
PrgState 1 {
ExeStack: (if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 100 
--------------------------------
PrgState 1 {
ExeStack: 
print(c)

(if(false) then(c=100)else(c=200))

SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 100 
--------------------------------
PrgState 1 {
ExeStack: 
print(c)

(if(false) then(c=100)else(c=200))

SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 100 
--------------------------------
PrgState 1 {
ExeStack: 
print(c)

c=100

SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 100 
--------------------------------
PrgState 1 {
ExeStack: 
print(c)

c=100

SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 100 
--------------------------------
PrgState 1 {
ExeStack: 
print(c)

SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 100 
--------------------------------
PrgState 1 {
ExeStack: 
print(c)

SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 100 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 100 100 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 100 100 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

bool b

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

bool b

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

int c

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

int c

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

b=true

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

b=true

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(false) then(c=100)else(c=200))
print(c)

(if(b) then(c=100)else(c=200))

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(false) then(c=100)else(c=200))
print(c)

(if(b) then(c=100)else(c=200))

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(false) then(c=100)else(c=200))
print(c)

c=100

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(false) then(c=100)else(c=200))
print(c)

c=100

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

bool b

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

bool b

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

int c

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

int c

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

b=true

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

b=true

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(false) then(c=100)else(c=200))
print(c)

(if(b) then(c=100)else(c=200))

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(false) then(c=100)else(c=200))
print(c)

(if(b) then(c=100)else(c=200))

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(false) then(c=100)else(c=200))
print(c)

c=100

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(false) then(c=100)else(c=200))
print(c)

c=100

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(false) then(c=100)else(c=200))
print(c)

print(c)

SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(false) then(c=100)else(c=200))
print(c)

print(c)

SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 100 
--------------------------------
PrgState 1 {
ExeStack: (if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 100 
--------------------------------
PrgState 1 {
ExeStack: 
print(c)

(if(false) then(c=100)else(c=200))

SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 100 
--------------------------------
PrgState 1 {
ExeStack: 
print(c)

(if(false) then(c=100)else(c=200))

SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 100 
--------------------------------
PrgState 1 {
ExeStack: 
print(c)

c=100

SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 100 
--------------------------------
PrgState 1 {
ExeStack: 
print(c)

c=100

SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 100 
--------------------------------
PrgState 1 {
ExeStack: 
print(c)

SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 100 
--------------------------------
PrgState 1 {
ExeStack: 
print(c)

SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 100 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 100 100 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 100 100 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

bool b

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

bool b

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

int c

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

int c

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

b=true

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

b=true

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(false) then(c=100)else(c=200))
print(c)

(if(b) then(c=100)else(c=200))

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(false) then(c=100)else(c=200))
print(c)

(if(b) then(c=100)else(c=200))

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(false) then(c=100)else(c=200))
print(c)

c=100

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(false) then(c=100)else(c=200))
print(c)

c=100

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

bool b

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

bool b

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int c
b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

int c

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

int c

SymTable: b -> false; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: b=true
(if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

b=true

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

b=true

SymTable: b -> false; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(b) then(c=100)else(c=200))
print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(false) then(c=100)else(c=200))
print(c)

(if(b) then(c=100)else(c=200))

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(false) then(c=100)else(c=200))
print(c)

(if(b) then(c=100)else(c=200))

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(false) then(c=100)else(c=200))
print(c)

c=100

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(false) then(c=100)else(c=200))
print(c)

c=100

SymTable: b -> true; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(c)
(if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(false) then(c=100)else(c=200))
print(c)

print(c)

SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(false) then(c=100)else(c=200))
print(c)

print(c)

SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: (if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 100 
--------------------------------
PrgState 1 {
ExeStack: (if(false) then(c=100)else(c=200))
print(c)

SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 100 
--------------------------------
PrgState 1 {
ExeStack: 
print(c)

(if(false) then(c=100)else(c=200))

SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 100 
--------------------------------
PrgState 1 {
ExeStack: 
print(c)

(if(false) then(c=100)else(c=200))

SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 100 
--------------------------------
PrgState 1 {
ExeStack: 
print(c)

c=200

SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 100 
--------------------------------
PrgState 1 {
ExeStack: 
print(c)

c=200

SymTable: b -> true; c -> 100; 
FileTable: 
Heap: 
Output: 100 
--------------------------------
PrgState 1 {
ExeStack: 
print(c)

SymTable: b -> true; c -> 200; 
FileTable: 
Heap: 
Output: 100 
--------------------------------
PrgState 1 {
ExeStack: 
print(c)

SymTable: b -> true; c -> 200; 
FileTable: 
Heap: 
Output: 100 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: b -> true; c -> 200; 
FileTable: 
Heap: 
Output: 100 200 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: b -> true; c -> 200; 
FileTable: 
Heap: 
Output: 100 200 
--------------------------------
PrgState 1 {
ExeStack: Ref(int) a
newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

int v

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Ref(int) a
newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

int v

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Ref(int) a
newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Ref(int) a
newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

Ref(int) a

SymTable: v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

Ref(int) a

SymTable: v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: a -> (0, int); v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: a -> (0, int); v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

newAlloc(a , 20)

SymTable: a -> (0, int); v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

newAlloc(a , 20)

SymTable: a -> (0, int); v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))
v=0
while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))
v=0
while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=0

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=0

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 40; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 40; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 1 {
ExeStack: Ref(int) a
newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

int v

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Ref(int) a
newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

int v

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Ref(int) a
newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Ref(int) a
newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

Ref(int) a

SymTable: v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

Ref(int) a

SymTable: v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: a -> (0, int); v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: a -> (0, int); v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

newAlloc(a , 20)

SymTable: a -> (0, int); v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

newAlloc(a , 20)

SymTable: a -> (0, int); v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))
v=0
while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))
v=0
while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=0

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=0

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 40; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 40; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 1 {
ExeStack: Ref(int) a
newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

int v

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Ref(int) a
newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

int v

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Ref(int) a
newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Ref(int) a
newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

Ref(int) a

SymTable: v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

Ref(int) a

SymTable: v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: a -> (0, int); v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: a -> (0, int); v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

newAlloc(a , 20)

SymTable: a -> (0, int); v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

newAlloc(a , 20)

SymTable: a -> (0, int); v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))
v=0
while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))
v=0
while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=0

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=0

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 40; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 40; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 1 {
ExeStack: Ref(int) a
newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

int v

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Ref(int) a
newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

int v

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Ref(int) a
newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Ref(int) a
newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

Ref(int) a

SymTable: v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

Ref(int) a

SymTable: v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: a -> (0, int); v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: a -> (0, int); v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

newAlloc(a , 20)

SymTable: a -> (0, int); v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

newAlloc(a , 20)

SymTable: a -> (0, int); v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))
v=0
while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))
v=0
while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=0

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=0

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 40; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 40; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 1 {
ExeStack: Ref(int) a
newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

int v

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Ref(int) a
newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

int v

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Ref(int) a
newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Ref(int) a
newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

Ref(int) a

SymTable: v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

Ref(int) a

SymTable: v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: a -> (0, int); v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: a -> (0, int); v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

newAlloc(a , 20)

SymTable: a -> (0, int); v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

newAlloc(a , 20)

SymTable: a -> (0, int); v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))
v=0
while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))
v=0
while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=0

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=0

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 40; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 40; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 1 {
ExeStack: Ref(int) a
newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

int v

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Ref(int) a
newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

int v

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Ref(int) a
newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Ref(int) a
newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

Ref(int) a

SymTable: v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

Ref(int) a

SymTable: v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: a -> (0, int); v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: a -> (0, int); v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

newAlloc(a , 20)

SymTable: a -> (0, int); v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

newAlloc(a , 20)

SymTable: a -> (0, int); v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))
v=0
while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))
v=0
while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=0

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=0

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 40; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 40; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 1 {
ExeStack: Ref(int) a
newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

int v

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Ref(int) a
newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

int v

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Ref(int) a
newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Ref(int) a
newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

Ref(int) a

SymTable: v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

Ref(int) a

SymTable: v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: a -> (0, int); v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(a , 20)
for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: a -> (0, int); v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

newAlloc(a , 20)

SymTable: a -> (0, int); v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

newAlloc(a , 20)

SymTable: a -> (0, int); v -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))
print(rH(a))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

for( v=0; v<3; v=v+1 ) 
 fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))
v=0
while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))
v=0
while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=0

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=0

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )
fork((print(v);v=v*rH(a)))
v=v+1

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 1; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

fork((print(v);v=v*rH(a)))

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

v=v+1

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: print(v)
v=v*rH(a)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

while(v<3) do ( (fork((print(v);v=v*rH(a)));v=v+1) )

SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

print(v)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(a))

SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 10 {
ExeStack: 
v=v*rH(a)

SymTable: a -> (1, int); v -> 2; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 40; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: a -> (1, int); v -> 3; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 0; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 20; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: a -> (1, int); v -> 40; 
FileTable: 
Heap: 1 -> 20
Output: 0 1 2 20 
--------------------------------
PrgState 1 {
ExeStack: int cnt
newAlloc(v1 , 1)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int cnt
newAlloc(v1 , 1)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int cnt
newAlloc(v1 , 1)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int cnt
newAlloc(v1 , 1)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(v1 , 1)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(v1 , 1)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(v1 , 1)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(v1 , 1)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 1)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 1)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Output: 
--------------------------------
PrgState 1 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Output: 
--------------------------------
PrgState 1 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Output: 
--------------------------------
PrgState 1 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Output: 
--------------------------------
PrgState 1 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Output: 
--------------------------------
PrgState 1 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Output: 
--------------------------------
PrgState 1 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Output: 
--------------------------------
PrgState 1 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Output: 
--------------------------------
PrgState 1 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Output: 
--------------------------------
PrgState 10 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Output: 
--------------------------------
PrgState 1 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Output: 
--------------------------------
PrgState 10 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Output: 
--------------------------------
PrgState 10 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Output: 
--------------------------------
PrgState 10 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Output: 
--------------------------------
PrgState 10 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Output: 
--------------------------------
PrgState 10 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Output: 
--------------------------------
PrgState 10 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Output: 
--------------------------------
PrgState 10 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Output: 
--------------------------------
PrgState 10 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Output: 
--------------------------------
PrgState 10 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Output: 
--------------------------------
PrgState 10 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Output: 
--------------------------------
PrgState 10 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Output: 
--------------------------------
PrgState 10 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Output: 
--------------------------------
PrgState 10 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Output: 
--------------------------------
PrgState 10 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Output: 
--------------------------------
PrgState 10 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Output: 
--------------------------------
PrgState 10 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Output: 
--------------------------------
PrgState 10 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Output: 
--------------------------------
PrgState 10 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Output: 
--------------------------------
PrgState 10 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Output: 9 10 
--------------------------------
PrgState 10 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Output: 9 10 
--------------------------------
PrgState 10 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Output: 9 10 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Output: 9 10 
--------------------------------
PrgState 10 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Output: 9 10 
--------------------------------
PrgState 10 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Output: 9 10 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Output: 9 10 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Output: 9 10 
--------------------------------
PrgState 10 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Output: 9 10 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Output: 9 10 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Output: 9 10 
--------------------------------
PrgState 10 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Output: 9 10 
--------------------------------
PrgState 1 {
ExeStack: int cnt
newAlloc(v1 , 1)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int cnt
newAlloc(v1 , 1)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int cnt
newAlloc(v1 , 1)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int cnt
newAlloc(v1 , 1)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(v1 , 1)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(v1 , 1)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(v1 , 1)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(v1 , 1)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 1)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 1)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Output: 
--------------------------------
PrgState 1 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Output: 
--------------------------------
PrgState 1 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Output: 
--------------------------------
PrgState 1 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Output: 
--------------------------------
PrgState 1 {
ExeStack: int cnt
acquire( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int cnt
acquire( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int cnt
acquire( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int cnt
acquire( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*1)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*1)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*1)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*1)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*1)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 2 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 2 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 2 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 2 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 2 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 2 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 2 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 2 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 2 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*1)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 2 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 2 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 2 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 2 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 2 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 2 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 2 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 4
Output: 2 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 4
Output: 2 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 4
Output: 2 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 4
Output: 2 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 4
Output: 2 4 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 4
Output: 2 4 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 4
Output: 2 4 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 4
Output: 2 4 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 4
Output: 2 4 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 4
Output: 2 4 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 4
Output: 2 4 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 4
Output: 2 4 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 4
Output: 2 4 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 4
Output: 2 4 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 4
Output: 2 4 3 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 4
Output: 2 4 3 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 4
Output: 2 4 3 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 4
Output: 2 4 3 
--------------------------------
PrgState 1 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 399 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 399 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 399 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 399 
--------------------------------
PrgState 1 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: Semaphore( cnt, rH(v1), 1)
acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )
acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 10 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 10 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 10 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 10 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 10 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 10 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 10 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 10 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 10 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 10 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 10 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 10 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 10 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 10 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 10 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 10 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 10 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 10 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 10 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 10 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 1 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 2 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 2 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
release( cnt )

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
release( cnt )

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 2 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 2 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
release( cnt )

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
release( cnt )

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 2 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 2 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
release( cnt )

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
release( cnt )

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 2 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 2 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
release( cnt )

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
release( cnt )

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 19 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 19 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 19 
--------------------------------
PrgState 0 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 19 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 19 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 19 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 19 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 19 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 19 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 19 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 19 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 19 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 19 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 19 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 19 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 19 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 19 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 19 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 19 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 19 
--------------------------------
PrgState 2 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 19 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 19 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 19 
--------------------------------
PrgState 2 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 19 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 19 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 19 400 
--------------------------------
PrgState 2 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 19 400 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 19 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 19 400 
--------------------------------
PrgState 2 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 19 400 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 19 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 19 400 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 19 400 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 19 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 19 400 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 19 400 
--------------------------------
PrgState 3 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 3 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 3 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 3 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 3 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 3 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 3 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 3 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 3 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 3 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 3 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 3 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 3 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 3 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 2 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 2 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
release( cnt )

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
release( cnt )

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 2 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 2 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
release( cnt )

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
release( cnt )

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 19 20 400 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 2 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 2 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
release( cnt )

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
release( cnt )

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Semaphore(cnt; rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Semaphore(cnt; rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire(cnt)
wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire(cnt)
wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 2 {
ExeStack: acquire(cnt)
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 2 {
ExeStack: acquire(cnt)
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
acquire(cnt)

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
acquire(cnt)

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
acquire(cnt)

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
acquire(cnt)

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: 
acquire(cnt)

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: 
acquire(cnt)

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 400 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 400 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 400 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@45ca36b2
Output: 19 20 400 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Semaphore(cnt; rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Semaphore(cnt; rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire(cnt)
wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire(cnt)
wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 2 {
ExeStack: acquire(cnt)
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 2 {
ExeStack: acquire(cnt)
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
acquire(cnt)

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
acquire(cnt)

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
acquire(cnt)

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
acquire(cnt)

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@2d89b570
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5f247886
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5f247886
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5f247886
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5f247886
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5f247886
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5f247886
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5f247886
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5f247886
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5f247886
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5f247886
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f247886
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f247886
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Semaphore(cnt; rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f247886
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Semaphore(cnt; rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f247886
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f247886
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f247886
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f247886
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f247886
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f247886
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire(cnt)
wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f247886
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f247886
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire(cnt)
wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f247886
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Semaphore(cnt; rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Semaphore(cnt; rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire(cnt)
wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire(cnt)
wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 2 {
ExeStack: acquire(cnt)
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 2 {
ExeStack: acquire(cnt)
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
acquire(cnt)

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
acquire(cnt)

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
acquire(cnt)

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
acquire(cnt)

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@36c594b5
Output: 19 20 
--------------------------------
PrgState 3 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 3 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 3 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 3 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 3 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 3 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 3 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 3 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 3 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 3 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 3 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 3 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 3 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Semaphore(cnt; rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 3 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Semaphore(cnt; rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 3 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 3 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 3 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 3 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 3 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 4 {
ExeStack: acquire(cnt)
wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 3 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 4 {
ExeStack: acquire(cnt)
wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 3 {
ExeStack: acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 4 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 3 {
ExeStack: acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 4 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 3 {
ExeStack: acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 4 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 5 {
ExeStack: acquire(cnt)
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 3 {
ExeStack: acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 4 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 5 {
ExeStack: acquire(cnt)
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 4 {
ExeStack: print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 5 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 4 {
ExeStack: print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 5 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 4 {
ExeStack: print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 5 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 4 {
ExeStack: print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 5 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 3 {
ExeStack: 
acquire(cnt)

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 4 {
ExeStack: 
acquire(cnt)

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 5 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 3 {
ExeStack: 
acquire(cnt)

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 4 {
ExeStack: 
acquire(cnt)

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 5 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 
--------------------------------
PrgState 3 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 
--------------------------------
PrgState 4 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 
--------------------------------
PrgState 5 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 
--------------------------------
PrgState 3 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 
--------------------------------
PrgState 4 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 
--------------------------------
PrgState 5 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 
--------------------------------
PrgState 3 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 
--------------------------------
PrgState 5 {
ExeStack: print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 
--------------------------------
PrgState 3 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 
--------------------------------
PrgState 5 {
ExeStack: print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 
--------------------------------
PrgState 3 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 
--------------------------------
PrgState 5 {
ExeStack: print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 
--------------------------------
PrgState 3 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 
--------------------------------
PrgState 5 {
ExeStack: print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 
--------------------------------
PrgState 3 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 
--------------------------------
PrgState 5 {
ExeStack: 
acquire(cnt)

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 
--------------------------------
PrgState 3 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 
--------------------------------
PrgState 5 {
ExeStack: 
acquire(cnt)

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 
--------------------------------
PrgState 3 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 400 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 400 
--------------------------------
PrgState 5 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 400 
--------------------------------
PrgState 3 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 400 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 400 
--------------------------------
PrgState 5 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 400 
--------------------------------
PrgState 3 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 400 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 400 
--------------------------------
PrgState 5 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 400 
--------------------------------
PrgState 3 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 400 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 400 
--------------------------------
PrgState 5 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@1a3f7f7b
Output: 19 20 400 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@422c9fab
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@422c9fab
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@422c9fab
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@422c9fab
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@422c9fab
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@422c9fab
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@422c9fab
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@422c9fab
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@422c9fab
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@422c9fab
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@69c5c8d1
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@69c5c8d1
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@69c5c8d1
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@69c5c8d1
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@69c5c8d1
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@69c5c8d1
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@69c5c8d1
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@69c5c8d1
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@69c5c8d1
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@69c5c8d1
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@69c5c8d1
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@69c5c8d1
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Semaphore(cnt; rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@69c5c8d1
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Semaphore(cnt; rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@69c5c8d1
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@69c5c8d1
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@69c5c8d1
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@72be475
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@72be475
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@72be475
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@72be475
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@72be475
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@72be475
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@72be475
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@72be475
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@72be475
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@72be475
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@72be475
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@72be475
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Semaphore(cnt; rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@72be475
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Semaphore(cnt; rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@72be475
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@72be475
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@72be475
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@72be475
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@72be475
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@48737d5e
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@48737d5e
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@48737d5e
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@48737d5e
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@48737d5e
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@48737d5e
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@48737d5e
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@48737d5e
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@48737d5e
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@48737d5e
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@48737d5e
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@48737d5e
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Semaphore(cnt; rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@48737d5e
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Semaphore(cnt; rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@48737d5e
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@48737d5e
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@48737d5e
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Semaphore(cnt; rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Semaphore(cnt; rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Semaphore(cnt; rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Semaphore(cnt; rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire(cnt)
wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire(cnt)
wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 2 {
ExeStack: acquire(cnt)
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 2 {
ExeStack: acquire(cnt)
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
acquire(cnt)

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
acquire(cnt)

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
acquire(cnt)

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
acquire(cnt)

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: 
acquire(cnt)

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: 
acquire(cnt)

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 400 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 400 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 400 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@5f7f37ad
Output: 19 20 400 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Semaphore(cnt; rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Semaphore(cnt; rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire(cnt)
wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire(cnt)
wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 2 {
ExeStack: acquire(cnt)
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 2 {
ExeStack: acquire(cnt)
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
acquire(cnt)

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
acquire(cnt)

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
acquire(cnt)

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
acquire(cnt)

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: 
acquire(cnt)

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 2 {
ExeStack: 
acquire(cnt)

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 400 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 400 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 400 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Semaphore: Model.Utils.MySemaphore@c89598a
Output: 19 20 400 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v2
Ref(int) v3
newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
int cnt
newBarrier(cnt; rH(v2))
fork((awaitBarrier(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))
fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v2
Ref(int) v3
newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
int cnt
newBarrier(cnt; rH(v2))
fork((awaitBarrier(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))
fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v2
Ref(int) v3
newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
int cnt
newBarrier(cnt; rH(v2))
fork((awaitBarrier(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))
fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v2
Ref(int) v3
newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
int cnt
newBarrier(cnt; rH(v2))
fork((awaitBarrier(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))
fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v3
newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
int cnt
newBarrier(cnt; rH(v2))
fork((awaitBarrier(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))
fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

Ref(int) v2

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v3
newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
int cnt
newBarrier(cnt; rH(v2))
fork((awaitBarrier(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))
fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

Ref(int) v2

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v3
newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
int cnt
newBarrier(cnt; rH(v2))
fork((awaitBarrier(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))
fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

SymTable: v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v3
newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
int cnt
newBarrier(cnt; rH(v2))
fork((awaitBarrier(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))
fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

SymTable: v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
int cnt
newBarrier(cnt; rH(v2))
fork((awaitBarrier(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))
fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

Ref(int) v3

SymTable: v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
int cnt
newBarrier(cnt; rH(v2))
fork((awaitBarrier(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))
fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

Ref(int) v3

SymTable: v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
int cnt
newBarrier(cnt; rH(v2))
fork((awaitBarrier(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))
fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

SymTable: v1 -> (0, int); v2 -> (0, int); v3 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
int cnt
newBarrier(cnt; rH(v2))
fork((awaitBarrier(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))
fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

SymTable: v1 -> (0, int); v2 -> (0, int); v3 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v2 , 3)
newAlloc(v3 , 4)
int cnt
newBarrier(cnt; rH(v2))
fork((awaitBarrier(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))
fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

newAlloc(v1 , 2)

SymTable: v1 -> (0, int); v2 -> (0, int); v3 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v2 , 3)
newAlloc(v3 , 4)
int cnt
newBarrier(cnt; rH(v2))
fork((awaitBarrier(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))
fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

newAlloc(v1 , 2)

SymTable: v1 -> (0, int); v2 -> (0, int); v3 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v2 , 3)
newAlloc(v3 , 4)
int cnt
newBarrier(cnt; rH(v2))
fork((awaitBarrier(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))
fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

SymTable: v1 -> (1, int); v2 -> (0, int); v3 -> (0, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v2 , 3)
newAlloc(v3 , 4)
int cnt
newBarrier(cnt; rH(v2))
fork((awaitBarrier(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))
fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

SymTable: v1 -> (1, int); v2 -> (0, int); v3 -> (0, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v3 , 4)
int cnt
newBarrier(cnt; rH(v2))
fork((awaitBarrier(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))
fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

newAlloc(v2 , 3)

SymTable: v1 -> (1, int); v2 -> (0, int); v3 -> (0, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v3 , 4)
int cnt
newBarrier(cnt; rH(v2))
fork((awaitBarrier(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))
fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

newAlloc(v2 , 3)

SymTable: v1 -> (1, int); v2 -> (0, int); v3 -> (0, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v3 , 4)
int cnt
newBarrier(cnt; rH(v2))
fork((awaitBarrier(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))
fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

SymTable: v1 -> (1, int); v2 -> (2, int); v3 -> (0, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v3 , 4)
int cnt
newBarrier(cnt; rH(v2))
fork((awaitBarrier(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))
fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

SymTable: v1 -> (1, int); v2 -> (2, int); v3 -> (0, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newBarrier(cnt; rH(v2))
fork((awaitBarrier(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))
fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

newAlloc(v3 , 4)

SymTable: v1 -> (1, int); v2 -> (2, int); v3 -> (0, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newBarrier(cnt; rH(v2))
fork((awaitBarrier(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))
fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

newAlloc(v3 , 4)

SymTable: v1 -> (1, int); v2 -> (2, int); v3 -> (0, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newBarrier(cnt; rH(v2))
fork((awaitBarrier(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))
fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

SymTable: v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newBarrier(cnt; rH(v2))
fork((awaitBarrier(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))
fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

SymTable: v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: newBarrier(cnt; rH(v2))
fork((awaitBarrier(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))
fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

int cnt

SymTable: v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: newBarrier(cnt; rH(v2))
fork((awaitBarrier(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))
fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

int cnt

SymTable: v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: newBarrier(cnt; rH(v2))
fork((awaitBarrier(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))
fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: newBarrier(cnt; rH(v2))
fork((awaitBarrier(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))
fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((awaitBarrier(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))
fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

newBarrier(cnt; rH(v2))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((awaitBarrier(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))
fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

newBarrier(cnt; rH(v2))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((awaitBarrier(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))
fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((awaitBarrier(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))
fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

fork((awaitBarrier(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

fork((awaitBarrier(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 1 {
ExeStack: awaitBarrier(cnt)
wH(v1, rH(v1)*10)
print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))
awaitBarrier(cnt)
print(rH(v3))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 1 {
ExeStack: awaitBarrier(cnt)
wH(v1, rH(v1)*10)
print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: awaitBarrier(cnt)
print(rH(v3))

fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))

awaitBarrier(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: awaitBarrier(cnt)
print(rH(v3))

fork((awaitBarrier(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))

awaitBarrier(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: awaitBarrier(cnt)
print(rH(v3))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))

awaitBarrier(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 2 {
ExeStack: awaitBarrier(cnt)
wH(v2, rH(v2)*10)
wH(v2, rH(v2)*10)
print(rH(v2))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: awaitBarrier(cnt)
print(rH(v3))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))

awaitBarrier(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 2 {
ExeStack: awaitBarrier(cnt)
wH(v2, rH(v2)*10)
wH(v2, rH(v2)*10)
print(rH(v2))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
print(rH(v3))

awaitBarrier(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))

awaitBarrier(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v2, rH(v2)*10)
wH(v2, rH(v2)*10)
print(rH(v2))

awaitBarrier(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
print(rH(v3))

awaitBarrier(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))

awaitBarrier(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v2, rH(v2)*10)
wH(v2, rH(v2)*10)
print(rH(v2))

awaitBarrier(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
print(rH(v3))

awaitBarrier(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))

awaitBarrier(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v2, rH(v2)*10)
wH(v2, rH(v2)*10)
print(rH(v2))

awaitBarrier(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
print(rH(v3))

awaitBarrier(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))

awaitBarrier(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v2, rH(v2)*10)
wH(v2, rH(v2)*10)
print(rH(v2))

awaitBarrier(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
print(rH(v3))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v2, rH(v2)*10)
wH(v2, rH(v2)*10)
print(rH(v2))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
print(rH(v3))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v2, rH(v2)*10)
wH(v2, rH(v2)*10)
print(rH(v2))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 4 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(v1))

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 4 
--------------------------------
PrgState 2 {
ExeStack: wH(v2, rH(v2)*10)
print(rH(v2))

wH(v2, rH(v2)*10)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 4 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 4 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(v1))

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 4 
--------------------------------
PrgState 2 {
ExeStack: wH(v2, rH(v2)*10)
print(rH(v2))

wH(v2, rH(v2)*10)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 4 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 4 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 4 
--------------------------------
PrgState 2 {
ExeStack: wH(v2, rH(v2)*10)
print(rH(v2))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 4 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 4 
--------------------------------
PrgState 1 {
ExeStack: 
print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 4 
--------------------------------
PrgState 2 {
ExeStack: wH(v2, rH(v2)*10)
print(rH(v2))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 4 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 4 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 4 20 
--------------------------------
PrgState 2 {
ExeStack: 
print(rH(v2))

wH(v2, rH(v2)*10)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 4 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 4 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 4 20 
--------------------------------
PrgState 2 {
ExeStack: 
print(rH(v2))

wH(v2, rH(v2)*10)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 4 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 300
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 4 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 300
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 4 20 
--------------------------------
PrgState 2 {
ExeStack: 
print(rH(v2))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 300
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 4 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 300
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 4 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 300
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 4 20 
--------------------------------
PrgState 2 {
ExeStack: 
print(rH(v2))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 300
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 4 20 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 300
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 4 20 300 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 300
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 4 20 300 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 300
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 4 20 300 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 300
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 4 20 300 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 300
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 4 20 300 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 300
3 -> 4
Semaphore: Model.Utils.MyBarrier@75934893
Output: 4 20 300 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v2
int x
int q
newAlloc(v1 , 20)
newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v2
int x
int q
newAlloc(v1 , 20)
newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v2
int x
int q
newAlloc(v1 , 20)
newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v2
int x
int q
newAlloc(v1 , 20)
newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: int x
int q
newAlloc(v1 , 20)
newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

Ref(int) v2

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: int x
int q
newAlloc(v1 , 20)
newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

Ref(int) v2

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: int x
int q
newAlloc(v1 , 20)
newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: int x
int q
newAlloc(v1 , 20)
newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: int q
newAlloc(v1 , 20)
newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

int x

SymTable: v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: int q
newAlloc(v1 , 20)
newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

int x

SymTable: v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: int q
newAlloc(v1 , 20)
newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: x -> 0; v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: int q
newAlloc(v1 , 20)
newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: x -> 0; v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 20)
newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

int q

SymTable: x -> 0; v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 20)
newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

int q

SymTable: x -> 0; v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 20)
newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 20)
newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

newAlloc(v1 , 20)

SymTable: q -> 0; x -> 0; v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

newAlloc(v1 , 20)

SymTable: q -> 0; x -> 0; v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (0, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (0, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

newAlloc(v2 , 30)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (0, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

newAlloc(v2 , 30)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (0, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

Lock(x)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

Lock(x)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 1 {
ExeStack: fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))))
lock(x)
wH(v1, rH(v1)*10)
unlock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 1 {
ExeStack: fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))))
lock(x)
wH(v1, rH(v1)*10)
unlock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

Lock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 1 {
ExeStack: lock(x)
wH(v1, rH(v1)*10)
unlock(x)

fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))))

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

Lock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 1 {
ExeStack: lock(x)
wH(v1, rH(v1)*10)
unlock(x)

fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))))

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 1 {
ExeStack: lock(x)
wH(v1, rH(v1)*10)
unlock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 2 {
ExeStack: lock(x)
wH(v1, rH(v1)-1)
unlock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 1 {
ExeStack: lock(x)
wH(v1, rH(v1)*10)
unlock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 2 {
ExeStack: lock(x)
wH(v1, rH(v1)-1)
unlock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
unlock(x)

lock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)-1)
unlock(x)

lock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
unlock(x)

lock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)-1)
unlock(x)

lock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
unlock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)-1)
unlock(x)

lock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 3 {
ExeStack: fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))))
lock(q)
wH(v2, rH(v2)*10)
unlock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
unlock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)-1)
unlock(x)

lock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 3 {
ExeStack: fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))))
lock(q)
wH(v2, rH(v2)*10)
unlock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

no operation

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
unlock(x)

wH(v1, rH(v1)*10)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)-1)
unlock(x)

lock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 3 {
ExeStack: lock(q)
wH(v2, rH(v2)*10)
unlock(q)

fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))))

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

no operation

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
unlock(x)

wH(v1, rH(v1)*10)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)-1)
unlock(x)

lock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 3 {
ExeStack: lock(q)
wH(v2, rH(v2)*10)
unlock(q)

fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))))

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 200
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
unlock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 200
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)-1)
unlock(x)

lock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 200
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 3 {
ExeStack: lock(q)
wH(v2, rH(v2)*10)
unlock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 200
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 4 {
ExeStack: lock(q)
wH(v2, rH(v2)+5)
unlock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 200
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 200
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
unlock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 200
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)-1)
unlock(x)

lock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 200
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 3 {
ExeStack: lock(q)
wH(v2, rH(v2)*10)
unlock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 200
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 4 {
ExeStack: lock(q)
wH(v2, rH(v2)+5)
unlock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 200
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

no operation

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 200
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 200
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)-1)
unlock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 200
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 3 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 200
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 4 {
ExeStack: wH(v2, rH(v2)+5)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 200
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

no operation

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 200
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 200
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)-1)
unlock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 200
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 3 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 200
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 4 {
ExeStack: wH(v2, rH(v2)+5)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 200
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 200
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 200
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 2 {
ExeStack: 
unlock(x)

wH(v1, rH(v1)-1)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 200
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 3 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 200
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 4 {
ExeStack: wH(v2, rH(v2)+5)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 200
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 200
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 200
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 2 {
ExeStack: 
unlock(x)

wH(v1, rH(v1)-1)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 200
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 3 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 200
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 4 {
ExeStack: wH(v2, rH(v2)+5)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 200
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

no operation

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 2 {
ExeStack: 
unlock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 3 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 4 {
ExeStack: wH(v2, rH(v2)+5)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

no operation

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 2 {
ExeStack: 
unlock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 3 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 4 {
ExeStack: wH(v2, rH(v2)+5)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 3 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 4 {
ExeStack: wH(v2, rH(v2)+5)
unlock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 3 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 4 {
ExeStack: wH(v2, rH(v2)+5)
unlock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

no operation

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 3 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 4 {
ExeStack: 
unlock(q)

wH(v2, rH(v2)+5)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

no operation

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 3 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 4 {
ExeStack: 
unlock(q)

wH(v2, rH(v2)+5)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 30
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 3 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 4 {
ExeStack: 
unlock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 3 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 4 {
ExeStack: 
unlock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

lock(x)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 3 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

lock(x)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 3 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 3 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 3 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: unlock(x)
lock(q)
print(rH(v2))
unlock(q)

print(rH(v1))

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 3 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: unlock(x)
lock(q)
print(rH(v2))
unlock(q)

print(rH(v1))

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 3 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 
--------------------------------
PrgState 0 {
ExeStack: unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 3 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 0 {
ExeStack: unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 3 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 0 {
ExeStack: lock(q)
print(rH(v2))
unlock(q)

unlock(x)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 3 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 0 {
ExeStack: lock(q)
print(rH(v2))
unlock(q)

unlock(x)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 3 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 0 {
ExeStack: lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 3 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 0 {
ExeStack: lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 3 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v2))
unlock(q)

lock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 3 {
ExeStack: 
unlock(q)

wH(v2, rH(v2)*10)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v2))
unlock(q)

lock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 3 {
ExeStack: 
unlock(q)

wH(v2, rH(v2)*10)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 35
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v2))
unlock(q)

lock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 3 {
ExeStack: 
unlock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v2))
unlock(q)

lock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 3 {
ExeStack: 
unlock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v2))
unlock(q)

lock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 3 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v2))
unlock(q)

lock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 3 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 3 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 3 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 0 {
ExeStack: 
unlock(q)

print(rH(v2))

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 3 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 0 {
ExeStack: 
unlock(q)

print(rH(v2))

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 3 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 
--------------------------------
PrgState 0 {
ExeStack: 
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 350 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 350 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 350 
--------------------------------
PrgState 3 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 350 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 350 
--------------------------------
PrgState 0 {
ExeStack: 
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 350 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 350 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 350 
--------------------------------
PrgState 3 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 350 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 350 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 350 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 350 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 350 
--------------------------------
PrgState 3 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 350 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 350 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 350 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 350 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 350 
--------------------------------
PrgState 3 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 350 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 199
2 -> 350
Semaphore: Model.Utils.MyLock@65ec2a85
Output: 199 350 
--------------------------------
PrgState 5 {
ExeStack: Ref(int) v2
int x
int q
newAlloc(v1 , 20)
newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: Ref(int) v2
int x
int q
newAlloc(v1 , 20)
newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: Ref(int) v2
int x
int q
newAlloc(v1 , 20)
newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: Ref(int) v2
int x
int q
newAlloc(v1 , 20)
newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: int x
int q
newAlloc(v1 , 20)
newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

Ref(int) v2

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: int x
int q
newAlloc(v1 , 20)
newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

Ref(int) v2

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: int x
int q
newAlloc(v1 , 20)
newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: int x
int q
newAlloc(v1 , 20)
newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: int q
newAlloc(v1 , 20)
newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

int x

SymTable: v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: int q
newAlloc(v1 , 20)
newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

int x

SymTable: v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: int q
newAlloc(v1 , 20)
newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: x -> 0; v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: int q
newAlloc(v1 , 20)
newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: x -> 0; v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: newAlloc(v1 , 20)
newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

int q

SymTable: x -> 0; v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: newAlloc(v1 , 20)
newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

int q

SymTable: x -> 0; v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: newAlloc(v1 , 20)
newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: newAlloc(v1 , 20)
newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

newAlloc(v1 , 20)

SymTable: q -> 0; x -> 0; v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

newAlloc(v1 , 20)

SymTable: q -> 0; x -> 0; v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (0, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: newAlloc(v2 , 30)
Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (0, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

newAlloc(v2 , 30)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (0, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

newAlloc(v2 , 30)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (0, int); 
FileTable: 
Heap: 1 -> 20
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: Lock(x)
fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

Lock(x)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

Lock(x)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))
Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 6 {
ExeStack: fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))))
lock(x)
wH(v1, rH(v1)*10)
unlock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: Lock(q)
fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 6 {
ExeStack: fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))))
lock(x)
wH(v1, rH(v1)*10)
unlock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

Lock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 6 {
ExeStack: lock(x)
wH(v1, rH(v1)*10)
unlock(x)

fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))))

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

Lock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 6 {
ExeStack: lock(x)
wH(v1, rH(v1)*10)
unlock(x)

fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))))

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 6 {
ExeStack: lock(x)
wH(v1, rH(v1)*10)
unlock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 7 {
ExeStack: lock(x)
wH(v1, rH(v1)-1)
unlock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))
no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 6 {
ExeStack: lock(x)
wH(v1, rH(v1)*10)
unlock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 7 {
ExeStack: lock(x)
wH(v1, rH(v1)-1)
unlock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 6 {
ExeStack: wH(v1, rH(v1)*10)
unlock(x)

lock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 7 {
ExeStack: wH(v1, rH(v1)-1)
unlock(x)

lock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 6 {
ExeStack: wH(v1, rH(v1)*10)
unlock(x)

lock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 7 {
ExeStack: wH(v1, rH(v1)-1)
unlock(x)

lock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 6 {
ExeStack: wH(v1, rH(v1)*10)
unlock(x)

lock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 7 {
ExeStack: wH(v1, rH(v1)-1)
unlock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 8 {
ExeStack: fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))))
lock(q)
wH(v2, rH(v2)*10)
unlock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: no operation
no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 6 {
ExeStack: wH(v1, rH(v1)*10)
unlock(x)

lock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 7 {
ExeStack: wH(v1, rH(v1)-1)
unlock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 8 {
ExeStack: fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))))
lock(q)
wH(v2, rH(v2)*10)
unlock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

no operation

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 6 {
ExeStack: wH(v1, rH(v1)*10)
unlock(x)

lock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 7 {
ExeStack: 
unlock(x)

wH(v1, rH(v1)-1)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 8 {
ExeStack: lock(q)
wH(v2, rH(v2)*10)
unlock(q)

fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))))

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

no operation

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 6 {
ExeStack: wH(v1, rH(v1)*10)
unlock(x)

lock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 7 {
ExeStack: 
unlock(x)

wH(v1, rH(v1)-1)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 8 {
ExeStack: lock(q)
wH(v2, rH(v2)*10)
unlock(q)

fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))))

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 19
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 6 {
ExeStack: wH(v1, rH(v1)*10)
unlock(x)

lock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 19
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 7 {
ExeStack: 
unlock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 19
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 8 {
ExeStack: lock(q)
wH(v2, rH(v2)*10)
unlock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 19
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 9 {
ExeStack: lock(q)
wH(v2, rH(v2)+5)
unlock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 19
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: no operation
no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 19
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 6 {
ExeStack: wH(v1, rH(v1)*10)
unlock(x)

lock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 19
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 7 {
ExeStack: 
unlock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 19
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 8 {
ExeStack: lock(q)
wH(v2, rH(v2)*10)
unlock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 19
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 9 {
ExeStack: lock(q)
wH(v2, rH(v2)+5)
unlock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 19
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

no operation

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 19
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 6 {
ExeStack: wH(v1, rH(v1)*10)
unlock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 19
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 19
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 8 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 19
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 9 {
ExeStack: wH(v2, rH(v2)+5)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 19
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

no operation

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 19
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 6 {
ExeStack: wH(v1, rH(v1)*10)
unlock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 19
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 19
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 8 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 19
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 9 {
ExeStack: wH(v2, rH(v2)+5)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 19
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 19
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 6 {
ExeStack: 
unlock(x)

wH(v1, rH(v1)*10)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 19
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 19
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 8 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 19
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 9 {
ExeStack: wH(v2, rH(v2)+5)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 19
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: no operation
no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 19
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 6 {
ExeStack: 
unlock(x)

wH(v1, rH(v1)*10)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 19
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 19
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 8 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 19
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 9 {
ExeStack: wH(v2, rH(v2)+5)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 19
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

no operation

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 6 {
ExeStack: 
unlock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 8 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 9 {
ExeStack: wH(v2, rH(v2)+5)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

no operation

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 6 {
ExeStack: 
unlock(x)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 8 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 9 {
ExeStack: wH(v2, rH(v2)+5)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 6 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 8 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 9 {
ExeStack: wH(v2, rH(v2)+5)
unlock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: no operation
lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 6 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 8 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 9 {
ExeStack: wH(v2, rH(v2)+5)
unlock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

no operation

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 6 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 8 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 9 {
ExeStack: 
unlock(q)

wH(v2, rH(v2)+5)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

no operation

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 6 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 8 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 9 {
ExeStack: 
unlock(q)

wH(v2, rH(v2)+5)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 30
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 6 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 8 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 9 {
ExeStack: 
unlock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: lock(x)
print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 6 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 8 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 9 {
ExeStack: 
unlock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

lock(x)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 6 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 8 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 9 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

lock(x)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 6 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 8 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 9 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 6 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 8 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 9 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: print(rH(v1))
unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 6 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 8 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 9 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: unlock(x)
lock(q)
print(rH(v2))
unlock(q)

print(rH(v1))

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 6 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 8 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 9 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: unlock(x)
lock(q)
print(rH(v2))
unlock(q)

print(rH(v1))

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 6 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 8 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 9 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 
--------------------------------
PrgState 5 {
ExeStack: unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 6 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 8 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 9 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 5 {
ExeStack: unlock(x)
lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 6 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 8 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 9 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 5 {
ExeStack: lock(q)
print(rH(v2))
unlock(q)

unlock(x)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 6 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 8 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 9 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 5 {
ExeStack: lock(q)
print(rH(v2))
unlock(q)

unlock(x)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 6 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 8 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

lock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 9 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 5 {
ExeStack: lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 6 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 8 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 9 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 5 {
ExeStack: lock(q)
print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 6 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 8 {
ExeStack: wH(v2, rH(v2)*10)
unlock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 9 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 5 {
ExeStack: print(rH(v2))
unlock(q)

lock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 6 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 8 {
ExeStack: 
unlock(q)

wH(v2, rH(v2)*10)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 9 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 5 {
ExeStack: print(rH(v2))
unlock(q)

lock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 6 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 8 {
ExeStack: 
unlock(q)

wH(v2, rH(v2)*10)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 9 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 35
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 5 {
ExeStack: print(rH(v2))
unlock(q)

lock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 6 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 8 {
ExeStack: 
unlock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 9 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 5 {
ExeStack: print(rH(v2))
unlock(q)

lock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 6 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 8 {
ExeStack: 
unlock(q)

SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 9 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 5 {
ExeStack: print(rH(v2))
unlock(q)

lock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 6 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 8 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 9 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 5 {
ExeStack: print(rH(v2))
unlock(q)

lock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 6 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 8 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 9 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 5 {
ExeStack: print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 6 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 8 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 9 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 5 {
ExeStack: print(rH(v2))
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 6 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 8 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 9 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 5 {
ExeStack: 
unlock(q)

print(rH(v2))

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 6 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 8 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 9 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 5 {
ExeStack: 
unlock(q)

print(rH(v2))

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 6 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 8 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 9 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 
--------------------------------
PrgState 5 {
ExeStack: 
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 350 
--------------------------------
PrgState 6 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 350 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 350 
--------------------------------
PrgState 8 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 350 
--------------------------------
PrgState 9 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 350 
--------------------------------
PrgState 5 {
ExeStack: 
unlock(q)

SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 350 
--------------------------------
PrgState 6 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 350 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 350 
--------------------------------
PrgState 8 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 350 
--------------------------------
PrgState 9 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 350 
--------------------------------
PrgState 5 {
ExeStack: 
SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 350 
--------------------------------
PrgState 6 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 350 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 350 
--------------------------------
PrgState 8 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 350 
--------------------------------
PrgState 9 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 350 
--------------------------------
PrgState 5 {
ExeStack: 
SymTable: q -> 0; x -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 350 
--------------------------------
PrgState 6 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 350 
--------------------------------
PrgState 7 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 350 
--------------------------------
PrgState 8 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 350 
--------------------------------
PrgState 9 {
ExeStack: 
SymTable: x -> 0; q -> 0; v1 -> (1, int); v2 -> (2, int); 
FileTable: 
Heap: 1 -> 190
2 -> 350
Semaphore: Model.Utils.MyLock@4b17f255
Output: 190 350 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v1
Ref(int) v2
Ref(int) v3
newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

int cnt

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v1
Ref(int) v2
Ref(int) v3
newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

int cnt

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v1
Ref(int) v2
Ref(int) v3
newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v1
Ref(int) v2
Ref(int) v3
newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v2
Ref(int) v3
newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

Ref(int) v1

SymTable: cnt -> 0; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v2
Ref(int) v3
newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

Ref(int) v1

SymTable: cnt -> 0; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v2
Ref(int) v3
newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v2
Ref(int) v3
newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v3
newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

Ref(int) v2

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v3
newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

Ref(int) v2

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v3
newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v3
newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

Ref(int) v3

SymTable: cnt -> 0; v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

Ref(int) v3

SymTable: cnt -> 0; v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (0, int); v2 -> (0, int); v3 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (0, int); v2 -> (0, int); v3 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); v2 -> (0, int); v3 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); v2 -> (0, int); v3 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (0, int); v3 -> (0, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (0, int); v3 -> (0, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

newAlloc(v2 , 3)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (0, int); v3 -> (0, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

newAlloc(v2 , 3)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (0, int); v3 -> (0, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (0, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (0, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

newAlloc(v3 , 4)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (0, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

newAlloc(v3 , 4)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (0, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

Latch(cnt; rH(v2))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

Latch(cnt; rH(v2))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
countDown(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
countDown(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v2, rH(v2)*10)
print(rH(v2))
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v2, rH(v2)*10)
print(rH(v2))
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: await(cnt)
print(100)
countDown(cnt)
print(100)

fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
countDown(cnt)

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v2))
countDown(cnt)

wH(v2, rH(v2)*10)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: await(cnt)
print(100)
countDown(cnt)
print(100)

fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
countDown(cnt)

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v2))
countDown(cnt)

wH(v2, rH(v2)*10)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 
--------------------------------
PrgState 0 {
ExeStack: await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v2))
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 
--------------------------------
PrgState 3 {
ExeStack: wH(v3, rH(v3)*10)
print(rH(v3))
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v2))
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 
--------------------------------
PrgState 3 {
ExeStack: wH(v3, rH(v3)*10)
print(rH(v3))
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: print(100)
countDown(cnt)
print(100)

await(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: 
countDown(cnt)

print(rH(v2))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v3))
countDown(cnt)

wH(v3, rH(v3)*10)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: print(100)
countDown(cnt)
print(100)

await(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: 
countDown(cnt)

print(rH(v2))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v3))
countDown(cnt)

wH(v3, rH(v3)*10)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 
--------------------------------
PrgState 2 {
ExeStack: 
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v3))
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 
--------------------------------
PrgState 0 {
ExeStack: print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 
--------------------------------
PrgState 2 {
ExeStack: 
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v3))
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 
--------------------------------
PrgState 0 {
ExeStack: countDown(cnt)
print(100)

print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 
--------------------------------
PrgState 3 {
ExeStack: 
countDown(cnt)

print(rH(v3))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 
--------------------------------
PrgState 0 {
ExeStack: countDown(cnt)
print(100)

print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 
--------------------------------
PrgState 3 {
ExeStack: 
countDown(cnt)

print(rH(v3))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 
--------------------------------
PrgState 0 {
ExeStack: countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 100 40 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 100 40 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 100 40 
--------------------------------
PrgState 3 {
ExeStack: 
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 100 40 
--------------------------------
PrgState 0 {
ExeStack: countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 100 40 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 100 40 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 100 40 
--------------------------------
PrgState 3 {
ExeStack: 
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 100 40 
--------------------------------
PrgState 0 {
ExeStack: 
print(100)

countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 100 40 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 100 40 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 100 40 
--------------------------------
PrgState 3 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 100 40 
--------------------------------
PrgState 0 {
ExeStack: 
print(100)

countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 100 40 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 100 40 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 100 40 
--------------------------------
PrgState 3 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 100 40 
--------------------------------
PrgState 0 {
ExeStack: 
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 100 40 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 100 40 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 100 40 
--------------------------------
PrgState 3 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 100 40 
--------------------------------
PrgState 0 {
ExeStack: 
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 100 40 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 100 40 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 100 40 
--------------------------------
PrgState 3 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 100 40 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 100 40 100 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 100 40 100 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 100 40 100 
--------------------------------
PrgState 3 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 100 40 100 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 100 40 100 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 100 40 100 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 100 40 100 
--------------------------------
PrgState 3 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@76370cbd
Output: 20 30 100 40 100 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v1
Ref(int) v2
Ref(int) v3
newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

int cnt

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v1
Ref(int) v2
Ref(int) v3
newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

int cnt

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v1
Ref(int) v2
Ref(int) v3
newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v1
Ref(int) v2
Ref(int) v3
newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v2
Ref(int) v3
newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

Ref(int) v1

SymTable: cnt -> 0; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v2
Ref(int) v3
newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

Ref(int) v1

SymTable: cnt -> 0; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v2
Ref(int) v3
newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v2
Ref(int) v3
newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v3
newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

Ref(int) v2

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v3
newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

Ref(int) v2

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v3
newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: Ref(int) v3
newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

Ref(int) v3

SymTable: cnt -> 0; v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

Ref(int) v3

SymTable: cnt -> 0; v1 -> (0, int); v2 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (0, int); v2 -> (0, int); v3 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (0, int); v2 -> (0, int); v3 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); v2 -> (0, int); v3 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); v2 -> (0, int); v3 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (0, int); v3 -> (0, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v2 , 3)
newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (0, int); v3 -> (0, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

newAlloc(v2 , 3)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (0, int); v3 -> (0, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

newAlloc(v2 , 3)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (0, int); v3 -> (0, int); 
FileTable: 
Heap: 1 -> 2
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (0, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v3 , 4)
Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (0, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

newAlloc(v3 , 4)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (0, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

newAlloc(v3 , 4)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (0, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: Latch(cnt; rH(v2))
fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

Latch(cnt; rH(v2))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

Latch(cnt; rH(v2))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))
fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

fork((wH(v1, rH(v1)*10);(print(rH(v1));countDown(cnt))))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))
fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
countDown(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

fork((wH(v2, rH(v2)*10);(print(rH(v2));countDown(cnt))))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
countDown(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 2
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v2, rH(v2)*10)
print(rH(v2))
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))
await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v2, rH(v2)*10)
print(rH(v2))
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: await(cnt)
print(100)
countDown(cnt)
print(100)

fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
countDown(cnt)

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v2))
countDown(cnt)

wH(v2, rH(v2)*10)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: await(cnt)
print(100)
countDown(cnt)
print(100)

fork((wH(v3, rH(v3)*10);(print(rH(v3));countDown(cnt))))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
countDown(cnt)

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v2))
countDown(cnt)

wH(v2, rH(v2)*10)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 3
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 
--------------------------------
PrgState 0 {
ExeStack: await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v2))
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 
--------------------------------
PrgState 3 {
ExeStack: wH(v3, rH(v3)*10)
print(rH(v3))
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: await(cnt)
print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v2))
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 
--------------------------------
PrgState 3 {
ExeStack: wH(v3, rH(v3)*10)
print(rH(v3))
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: print(100)
countDown(cnt)
print(100)

await(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 
--------------------------------
PrgState 2 {
ExeStack: 
countDown(cnt)

print(rH(v2))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v3))
countDown(cnt)

wH(v3, rH(v3)*10)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 
--------------------------------
PrgState 0 {
ExeStack: print(100)
countDown(cnt)
print(100)

await(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 
--------------------------------
PrgState 2 {
ExeStack: 
countDown(cnt)

print(rH(v2))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v3))
countDown(cnt)

wH(v3, rH(v3)*10)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 4
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 
--------------------------------
PrgState 0 {
ExeStack: print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 
--------------------------------
PrgState 2 {
ExeStack: 
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v3))
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 
--------------------------------
PrgState 0 {
ExeStack: print(100)
countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 
--------------------------------
PrgState 2 {
ExeStack: 
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v3))
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 
--------------------------------
PrgState 0 {
ExeStack: countDown(cnt)
print(100)

print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 
--------------------------------
PrgState 3 {
ExeStack: 
countDown(cnt)

print(rH(v3))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 
--------------------------------
PrgState 0 {
ExeStack: countDown(cnt)
print(100)

print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 
--------------------------------
PrgState 3 {
ExeStack: 
countDown(cnt)

print(rH(v3))

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 
--------------------------------
PrgState 0 {
ExeStack: countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 100 40 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 100 40 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 100 40 
--------------------------------
PrgState 3 {
ExeStack: 
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 100 40 
--------------------------------
PrgState 0 {
ExeStack: countDown(cnt)
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 100 40 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 100 40 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 100 40 
--------------------------------
PrgState 3 {
ExeStack: 
countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 100 40 
--------------------------------
PrgState 0 {
ExeStack: 
print(100)

countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 100 40 3 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 100 40 3 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 100 40 3 
--------------------------------
PrgState 3 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 100 40 3 
--------------------------------
PrgState 0 {
ExeStack: 
print(100)

countDown(cnt)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 100 40 3 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 100 40 3 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 100 40 3 
--------------------------------
PrgState 3 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 100 40 3 
--------------------------------
PrgState 0 {
ExeStack: 
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 100 40 3 0 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 100 40 3 0 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 100 40 3 0 
--------------------------------
PrgState 3 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 100 40 3 0 
--------------------------------
PrgState 0 {
ExeStack: 
print(100)

SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 100 40 3 0 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 100 40 3 0 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 100 40 3 0 
--------------------------------
PrgState 3 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 100 40 3 0 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 100 40 3 0 100 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 100 40 3 0 100 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 100 40 3 0 100 
--------------------------------
PrgState 3 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 100 40 3 0 100 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 100 40 3 0 100 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 100 40 3 0 100 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 100 40 3 0 100 
--------------------------------
PrgState 3 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); v2 -> (2, int); v3 -> (3, int); 
FileTable: 
Heap: 1 -> 20
2 -> 30
3 -> 40
Semaphore: Model.Utils.MyLatch@72bc40a
Output: 20 1 30 2 100 40 3 0 100 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 1)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 1)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 1)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 1)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 1)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 1)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 1)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 1)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

newAlloc(v1 , 1)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

newAlloc(v1 , 1)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Semaphore(cnt; rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Semaphore(cnt; rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire(cnt)
wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire(cnt)
wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 2 {
ExeStack: acquire(cnt)
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 2 {
ExeStack: acquire(cnt)
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
acquire(cnt)

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
acquire(cnt)

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 
--------------------------------
PrgState 1 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 
--------------------------------
PrgState 1 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 
--------------------------------
PrgState 0 {
ExeStack: 
acquire(cnt)

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 
--------------------------------
PrgState 0 {
ExeStack: 
acquire(cnt)

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 
--------------------------------
PrgState 0 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 0 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 2 {
ExeStack: 
acquire(cnt)

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 2 {
ExeStack: 
acquire(cnt)

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 200 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 200 
--------------------------------
PrgState 2 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 200 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 200 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 200 
--------------------------------
PrgState 2 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 200 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 200 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 200 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 200 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 200 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 200 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@5ed8a3ee
Output: 10 9 200 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 2 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 2 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 2 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 0 {
ExeStack: 
release( cnt )

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 0 {
ExeStack: 
release( cnt )

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 0 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 399 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 399 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 399 
--------------------------------
PrgState 0 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 399 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 399 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 399 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 399 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 399 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 399 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 399 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 399 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 399 
--------------------------------
PrgState 3 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 3 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 3 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 3 {
ExeStack: int cnt
newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 3 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 3 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 3 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 3 {
ExeStack: newAlloc(v1 , 2)
Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 3 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 3 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

newAlloc(v1 , 2)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 3 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 3 {
ExeStack: Semaphore( cnt, rH(v1), 1)
fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 3 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 3 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

Semaphore( cnt, rH(v1), 1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 3 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 3 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))
fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 3 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 3 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(print(rH(v1));release( cnt )))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 3 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 4 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 3 {
ExeStack: fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))
acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 4 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 3 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 4 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 3 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

fork((acquire( cnt );(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release( cnt ))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 4 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 3 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 4 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 5 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 3 {
ExeStack: acquire( cnt )
print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 4 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 5 {
ExeStack: acquire( cnt )
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 4 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 5 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 4 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 5 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 2
Output: 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 4 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 5 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 4 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 5 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 4 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 5 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 4 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 5 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 4 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 5 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 4 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 5 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 5 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 5 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 5 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 5 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 20
Output: 20 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 5 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 5 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 5 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 5 {
ExeStack: print(rH(v1))
release( cnt )

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Output: 20 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 5 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 5 {
ExeStack: print(rH(v1))
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 5 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 5 {
ExeStack: 
release( cnt )

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 5 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 5 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 5 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v1)-1)
release( cnt )

acquire( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 5 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 5 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 3 {
ExeStack: print(rH(v1)-1)
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 5 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 3 {
ExeStack: 
release( cnt )

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 5 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 3 {
ExeStack: 
release( cnt )

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 5 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 
--------------------------------
PrgState 3 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 399 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 399 
--------------------------------
PrgState 5 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 399 
--------------------------------
PrgState 3 {
ExeStack: 
release( cnt )

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 399 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 399 
--------------------------------
PrgState 5 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 399 
--------------------------------
PrgState 3 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 399 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 399 
--------------------------------
PrgState 5 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 399 
--------------------------------
PrgState 3 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 399 
--------------------------------
PrgState 4 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 399 
--------------------------------
PrgState 5 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 400
Output: 20 400 399 
--------------------------------
PrgState 0 {
ExeStack: int b
int c
a=1
b=2
c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

int a

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int b
int c
a=1
b=2
c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

int a

SymTable: 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int b
int c
a=1
b=2
c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

SymTable: a -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int b
int c
a=1
b=2
c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

SymTable: a -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int c
a=1
b=2
c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

int b

SymTable: a -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int c
a=1
b=2
c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

int b

SymTable: a -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int c
a=1
b=2
c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

SymTable: a -> 0; b -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: int c
a=1
b=2
c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

SymTable: a -> 0; b -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: a=1
b=2
c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

int c

SymTable: a -> 0; b -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: a=1
b=2
c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

int c

SymTable: a -> 0; b -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: a=1
b=2
c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

SymTable: a -> 0; b -> 0; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: a=1
b=2
c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

SymTable: a -> 0; b -> 0; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: b=2
c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

a=1

SymTable: a -> 0; b -> 0; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: b=2
c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

a=1

SymTable: a -> 0; b -> 0; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: b=2
c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

SymTable: a -> 1; b -> 0; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: b=2
c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

SymTable: a -> 1; b -> 0; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

b=2

SymTable: a -> 1; b -> 0; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

b=2

SymTable: a -> 1; b -> 0; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

SymTable: a -> 1; b -> 2; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

SymTable: a -> 1; b -> 2; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

c=5

SymTable: a -> 1; b -> 2; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

c=5

SymTable: a -> 1; b -> 2; c -> 0; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

SymTable: a -> 1; b -> 2; c -> 5; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

SymTable: a -> 1; b -> 2; c -> 5; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
print(300)

switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )

SymTable: a -> 1; b -> 2; c -> 5; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
print(300)

switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )

SymTable: a -> 1; b -> 2; c -> 5; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
print(300)
print(a)
print(b)

SymTable: a -> 1; b -> 2; c -> 5; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
print(300)
print(a)
print(b)

SymTable: a -> 1; b -> 2; c -> 5; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
print(300)

print(b)

print(a)

SymTable: a -> 1; b -> 2; c -> 5; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
print(300)

print(b)

print(a)

SymTable: a -> 1; b -> 2; c -> 5; 
FileTable: 
Heap: 
Output: 
--------------------------------
PrgState 0 {
ExeStack: 
print(300)

print(b)

SymTable: a -> 1; b -> 2; c -> 5; 
FileTable: 
Heap: 
Output: 1 
--------------------------------
PrgState 0 {
ExeStack: 
print(300)

print(b)

SymTable: a -> 1; b -> 2; c -> 5; 
FileTable: 
Heap: 
Output: 1 
--------------------------------
PrgState 0 {
ExeStack: 
print(300)

SymTable: a -> 1; b -> 2; c -> 5; 
FileTable: 
Heap: 
Output: 1 2 
--------------------------------
PrgState 0 {
ExeStack: 
print(300)

SymTable: a -> 1; b -> 2; c -> 5; 
FileTable: 
Heap: 
Output: 1 2 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: a -> 1; b -> 2; c -> 5; 
FileTable: 
Heap: 
Output: 1 2 300 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: a -> 1; b -> 2; c -> 5; 
FileTable: 
Heap: 
Output: 1 2 300 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 1)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 1)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Ref(int) v1

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 1)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 0 {
ExeStack: int cnt
newAlloc(v1 , 1)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 1)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 1)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

int cnt

SymTable: v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 1)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 0 {
ExeStack: newAlloc(v1 , 1)
Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

newAlloc(v1 , 1)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

newAlloc(v1 , 1)

SymTable: cnt -> 0; v1 -> (0, int); 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 0 {
ExeStack: Semaphore(cnt; rH(v1))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Semaphore(cnt; rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

Semaphore(cnt; rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))
fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));acquire(cnt)))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire(cnt)
wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 0 {
ExeStack: fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))
acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 1 {
ExeStack: acquire(cnt)
wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));acquire(cnt))))))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 2 {
ExeStack: acquire(cnt)
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 0 {
ExeStack: acquire(cnt)
print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 1 {
ExeStack: wH(v1, rH(v1)*10)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 2 {
ExeStack: acquire(cnt)
wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 1
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 1 {
ExeStack: print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
acquire(cnt)

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 1 {
ExeStack: 
acquire(cnt)

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 1 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 1 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*10)
wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*10)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 10
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 2 {
ExeStack: wH(v1, rH(v1)*2)
print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
acquire(cnt)

wH(v1, rH(v1)*2)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 100
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 2 {
ExeStack: print(rH(v1))
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 2 {
ExeStack: 
acquire(cnt)

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 2 {
ExeStack: 
acquire(cnt)

print(rH(v1))

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 
--------------------------------
PrgState 2 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 
--------------------------------
PrgState 2 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 
--------------------------------
PrgState 0 {
ExeStack: print(rH(v1)-1)
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 
--------------------------------
PrgState 0 {
ExeStack: 
acquire(cnt)

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 
--------------------------------
PrgState 0 {
ExeStack: 
acquire(cnt)

print(rH(v1)-1)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 
--------------------------------
PrgState 0 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 199 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 199 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 199 
--------------------------------
PrgState 0 {
ExeStack: 
acquire(cnt)

SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 199 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 199 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 199 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 199 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 199 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 199 
--------------------------------
PrgState 0 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 199 
--------------------------------
PrgState 1 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 199 
--------------------------------
PrgState 2 {
ExeStack: 
SymTable: cnt -> 0; v1 -> (1, int); 
FileTable: 
Heap: 1 -> 200
Semaphore: Model.Utils.MySemaphore@7cb7ea92
Output: 10 200 199 
--------------------------------
PrgState 6 {
ExeStack: int b
int c
a=1
b=2
c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

int a

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 
--------------------------------
PrgState 6 {
ExeStack: int b
int c
a=1
b=2
c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

int a

SymTable: 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 
--------------------------------
PrgState 6 {
ExeStack: int b
int c
a=1
b=2
c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

SymTable: a -> 0; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 
--------------------------------
PrgState 6 {
ExeStack: int b
int c
a=1
b=2
c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

SymTable: a -> 0; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 
--------------------------------
PrgState 6 {
ExeStack: int c
a=1
b=2
c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

int b

SymTable: a -> 0; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 
--------------------------------
PrgState 6 {
ExeStack: int c
a=1
b=2
c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

int b

SymTable: a -> 0; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 
--------------------------------
PrgState 6 {
ExeStack: int c
a=1
b=2
c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

SymTable: a -> 0; b -> 0; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 
--------------------------------
PrgState 6 {
ExeStack: int c
a=1
b=2
c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

SymTable: a -> 0; b -> 0; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 
--------------------------------
PrgState 6 {
ExeStack: a=1
b=2
c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

int c

SymTable: a -> 0; b -> 0; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 
--------------------------------
PrgState 6 {
ExeStack: a=1
b=2
c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

int c

SymTable: a -> 0; b -> 0; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 
--------------------------------
PrgState 6 {
ExeStack: a=1
b=2
c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

SymTable: a -> 0; b -> 0; c -> 0; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 
--------------------------------
PrgState 6 {
ExeStack: a=1
b=2
c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

SymTable: a -> 0; b -> 0; c -> 0; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 
--------------------------------
PrgState 6 {
ExeStack: b=2
c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

a=1

SymTable: a -> 0; b -> 0; c -> 0; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 
--------------------------------
PrgState 6 {
ExeStack: b=2
c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

a=1

SymTable: a -> 0; b -> 0; c -> 0; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 
--------------------------------
PrgState 6 {
ExeStack: b=2
c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

SymTable: a -> 1; b -> 0; c -> 0; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 
--------------------------------
PrgState 6 {
ExeStack: b=2
c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

SymTable: a -> 1; b -> 0; c -> 0; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 
--------------------------------
PrgState 6 {
ExeStack: c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

b=2

SymTable: a -> 1; b -> 0; c -> 0; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 
--------------------------------
PrgState 6 {
ExeStack: c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

b=2

SymTable: a -> 1; b -> 0; c -> 0; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 
--------------------------------
PrgState 6 {
ExeStack: c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

SymTable: a -> 1; b -> 2; c -> 0; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 
--------------------------------
PrgState 6 {
ExeStack: c=5
switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

SymTable: a -> 1; b -> 2; c -> 0; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 
--------------------------------
PrgState 6 {
ExeStack: switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

c=5

SymTable: a -> 1; b -> 2; c -> 0; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 
--------------------------------
PrgState 6 {
ExeStack: switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

c=5

SymTable: a -> 1; b -> 2; c -> 0; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 
--------------------------------
PrgState 6 {
ExeStack: switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

SymTable: a -> 1; b -> 2; c -> 5; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 
--------------------------------
PrgState 6 {
ExeStack: switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )
print(300)

SymTable: a -> 1; b -> 2; c -> 5; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 
--------------------------------
PrgState 6 {
ExeStack: 
print(300)

switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )

SymTable: a -> 1; b -> 2; c -> 5; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 
--------------------------------
PrgState 6 {
ExeStack: 
print(300)

switch( a*10) 
(case( b*c ) (print(a);print(b)))
(case( 10 ) (print(100);print(200)))
(default print(100) )

SymTable: a -> 1; b -> 2; c -> 5; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 
--------------------------------
PrgState 6 {
ExeStack: 
print(300)
print(a)
print(b)

SymTable: a -> 1; b -> 2; c -> 5; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 
--------------------------------
PrgState 6 {
ExeStack: 
print(300)
print(a)
print(b)

SymTable: a -> 1; b -> 2; c -> 5; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 
--------------------------------
PrgState 6 {
ExeStack: 
print(300)

print(b)

print(a)

SymTable: a -> 1; b -> 2; c -> 5; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 
--------------------------------
PrgState 6 {
ExeStack: 
print(300)

print(b)

print(a)

SymTable: a -> 1; b -> 2; c -> 5; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 
--------------------------------
PrgState 6 {
ExeStack: 
print(300)

print(b)

SymTable: a -> 1; b -> 2; c -> 5; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 1 
--------------------------------
PrgState 6 {
ExeStack: 
print(300)

print(b)

SymTable: a -> 1; b -> 2; c -> 5; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 1 
--------------------------------
PrgState 6 {
ExeStack: 
print(300)

SymTable: a -> 1; b -> 2; c -> 5; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 1 2 
--------------------------------
PrgState 6 {
ExeStack: 
print(300)

SymTable: a -> 1; b -> 2; c -> 5; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 1 2 
--------------------------------
PrgState 6 {
ExeStack: 
SymTable: a -> 1; b -> 2; c -> 5; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 1 2 300 
--------------------------------
PrgState 6 {
ExeStack: 
SymTable: a -> 1; b -> 2; c -> 5; 
FileTable: 
Heap: 
Semaphore: Model.Utils.MySemaphore@622fa650
Output: 1 2 300 
--------------------------------
